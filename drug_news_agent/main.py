#!/usr/bin/env python3
"""
Script principal del Agente de B√∫squeda Inteligente de Noticias sobre Drogas.
Punto de entrada principal para ejecutar b√∫squedas completas.
"""

import os
import sys
import argparse
from datetime import datetime
from pathlib import Path

# Agregar el path del proyecto
sys.path.append(str(Path(__file__).parent.parent))

from intelligent_search_agent import IntelligentDrugNewsAgent
from csv_exporter import CentroRegionalCSVExporter


def main():
    """Funci√≥n principal del sistema"""
    
    print("üöÄ AGENTE DE B√öSQUEDA INTELIGENTE DE NOTICIAS SOBRE DROGAS")
    print("=" * 60)
    print("Sistema de an√°lisis de noticias para Am√©rica Latina y Caribe")
    print("Desarrollado para Centro Regional de Inteligencia")
    print("=" * 60)
    
    # Configurar argumentos de l√≠nea de comandos
    parser = argparse.ArgumentParser(
        description='Agente de b√∫squeda inteligente de noticias sobre drogas'
    )
    
    parser.add_argument(
        '--days',
        type=int,
        default=7,
        help='D√≠as hacia atr√°s para buscar noticias (default: 7)'
    )
    
    parser.add_argument(
        '--max-articles',
        type=int,
        default=20,
        help='M√°ximo art√≠culos por consulta (default: 20)'
    )
    
    parser.add_argument(
        '--min-relevance',
        choices=['Alta', 'Media', 'Baja'],
        default='Media',
        help='Relevancia m√≠nima de art√≠culos (default: Media)'
    )
    
    parser.add_argument(
        '--output-dir',
        type=str,
        default='./output',
        help='Directorio de salida (default: ./output)'
    )
    
    parser.add_argument(
        '--google-maps-key',
        type=str,
        help='API Key de Google Maps para geocodificaci√≥n precisa'
    )
    
    parser.add_argument(
        '--quick-test',
        action='store_true',
        help='Ejecutar b√∫squeda r√°pida de prueba'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Mostrar informaci√≥n detallada del proceso'
    )
    
    args = parser.parse_args()
    
    # Configurar par√°metros seg√∫n el modo
    if args.quick_test:
        print("üß™ MODO PRUEBA R√ÅPIDA")
        args.days = 3
        args.max_articles = 5
        args.min_relevance = 'Baja'
        
    # Crear directorio de salida
    output_dir = Path(args.output_dir)
    output_dir.mkdir(exist_ok=True)
    
    print(f"\\nüìã CONFIGURACI√ìN:")
    print(f"‚Ä¢ Per√≠odo de b√∫squeda: √öltimos {args.days} d√≠as")
    print(f"‚Ä¢ M√°ximo art√≠culos por consulta: {args.max_articles}")
    print(f"‚Ä¢ Relevancia m√≠nima: {args.min_relevance}")
    print(f"‚Ä¢ Directorio de salida: {output_dir.absolute()}")
    print(f"‚Ä¢ Google Maps API: {'‚úÖ Configurada' if args.google_maps_key else '‚ùå No configurada (usando coordenadas aproximadas)'}")
    
    try:
        # Inicializar el agente
        print(f"\\nüîß Inicializando sistema...")
        agent = IntelligentDrugNewsAgent(google_maps_api_key=args.google_maps_key)
        
        # Realizar b√∫squeda
        print(f"\\nüîç Ejecutando b√∫squeda inteligente...")
        results = agent.search_drug_news(
            days_back=args.days,
            max_articles_per_query=args.max_articles,
            min_relevance=args.min_relevance
        )
        
        # Mostrar resumen de resultados
        print_results_summary(results, args.verbose)
        
        # Exportar resultados
        print(f"\\nüíæ Exportando resultados...")
        exporter = CentroRegionalCSVExporter()
        
        csv_file = exporter.export_to_csv(results, str(output_dir))
        report_file = exporter.export_summary_report(results, str(output_dir))
        
        print(f"\\n‚úÖ PROCESO COMPLETADO EXITOSAMENTE")
        print(f"üìÅ Archivos generados:")
        print(f"   ‚Ä¢ CSV: {csv_file}")
        print(f"   ‚Ä¢ Reporte: {report_file}")
        
        # Mostrar estad√≠sticas finales
        print_final_statistics(results)
        
    except KeyboardInterrupt:
        print(f"\\n‚ö†Ô∏è Proceso interrumpido por el usuario")
        sys.exit(1)
        
    except Exception as e:
        print(f"\\n‚ùå ERROR: {str(e)}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


def print_results_summary(results, verbose=False):
    """Imprime resumen de resultados"""
    
    print(f"\\nüìä RESULTADOS DE LA B√öSQUEDA:")
    print(f"-" * 40)
    
    metrics = results.search_metrics
    print(f"‚Ä¢ Consultas realizadas: {metrics['total_queries']}")
    print(f"‚Ä¢ Art√≠culos encontrados: {metrics['raw_articles_found']}")
    print(f"‚Ä¢ Art√≠culos de pa√≠ses objetivo: {metrics['target_country_articles']}")
    print(f"‚Ä¢ Art√≠culos relevantes: {metrics['relevant_articles']}")
    print(f"‚Ä¢ Eventos √∫nicos identificados: {metrics['unique_events']}")
    print(f"‚Ä¢ Grupos de duplicados: {metrics['duplicate_groups']}")
    print(f"‚Ä¢ Art√≠culos geocodificados: {metrics['geocoded_articles']}")
    print(f"‚Ä¢ Tiempo de procesamiento: {metrics['processing_time_seconds']:.1f}s")
    
    if verbose and results.processed_news:
        print(f"\\nüì∞ MUESTRA DE ART√çCULOS PROCESADOS:")
        print(f"-" * 40)
        
        for i, news in enumerate(results.processed_news[:3]):
            print(f"\\n{i+1}. {news.article.title}")
            print(f"   ‚Ä¢ Relevancia: {news.relevance.level} ({news.relevance.score:.1f})")
            print(f"   ‚Ä¢ Pa√≠s: {news.location_info.country}")
            print(f"   ‚Ä¢ Ubicaci√≥n: {news.location_info.full_address}")
            print(f"   ‚Ä¢ Drogas mencionadas: {', '.join(news.relevance.drug_mentions[:3])}")
            
            if news.geocoding_result.success:
                coords = news.geocoding_result.coordinates
                print(f"   ‚Ä¢ Coordenadas: {coords.latitude:.4f}, {coords.longitude:.4f}")


def print_final_statistics(results):
    """Imprime estad√≠sticas finales"""
    
    print(f"\\nüéØ ESTAD√çSTICAS FINALES:")
    print(f"-" * 30)
    
    # Contar por relevancia
    relevance_counts = {'Alta': 0, 'Media': 0, 'Baja': 0}
    country_counts = {}
    drug_counts = {}
    
    for news in results.processed_news:
        relevance_counts[news.relevance.level] += 1
        
        country = news.location_info.country or "Sin especificar"
        country_counts[country] = country_counts.get(country, 0) + 1
        
        for drug in news.relevance.drug_mentions:
            drug_counts[drug] = drug_counts.get(drug, 0) + 1
    
    print(f"\\nüìà Por relevancia:")
    for level, count in relevance_counts.items():
        percentage = (count / len(results.processed_news)) * 100 if results.processed_news else 0
        print(f"   ‚Ä¢ {level}: {count} ({percentage:.1f}%)")
    
    print(f"\\nüåé Top pa√≠ses:")
    sorted_countries = sorted(country_counts.items(), key=lambda x: x[1], reverse=True)
    for country, count in sorted_countries[:5]:
        print(f"   ‚Ä¢ {country}: {count} art√≠culos")
    
    if drug_counts:
        print(f"\\nüíä Drogas m√°s mencionadas:")
        sorted_drugs = sorted(drug_counts.items(), key=lambda x: x[1], reverse=True)
        for drug, count in sorted_drugs[:5]:
            print(f"   ‚Ä¢ {drug}: {count} menciones")
    
    # Efectividad del sistema
    if results.search_metrics['raw_articles_found'] > 0:
        efficiency = (len(results.processed_news) / results.search_metrics['raw_articles_found']) * 100
        print(f"\\n‚ö° Eficiencia del filtrado: {efficiency:.1f}%")
        print(f"   ({len(results.processed_news)} art√≠culos √∫tiles de {results.search_metrics['raw_articles_found']} encontrados)")


def check_environment():
    """Verifica el entorno y dependencias"""
    
    required_files = [
        "/Users/macbook/Documents/WebSearchAgent/AnalisisArchivo/paises.csv",
        "/Users/macbook/Documents/WebSearchAgent/AnalisisArchivo/drogas palabras clave.csv",
        "/Users/macbook/Documents/WebSearchAgent/AnalisisArchivo/relevancia.csv"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå ARCHIVOS DE REFERENCIA FALTANTES:")
        for file_path in missing_files:
            print(f"   ‚Ä¢ {file_path}")
        print("\\nPor favor, aseg√∫rate de que los archivos CSV de referencia est√©n disponibles.")
        return False
    
    # Verificar APIs
    google_search_key = os.getenv('GOOGLE_SEARCH_KEY')
    jina_api_key = os.getenv('JINA_API_KEY')
    dashscope_key = os.getenv('DASHSCOPE_API_KEY')
    
    if not all([google_search_key, jina_api_key, dashscope_key]):
        print("‚ö†Ô∏è ADVERTENCIA: Algunas API keys no est√°n configuradas:")
        if not google_search_key:
            print("   ‚Ä¢ GOOGLE_SEARCH_KEY no encontrada")
        if not jina_api_key:
            print("   ‚Ä¢ JINA_API_KEY no encontrada") 
        if not dashscope_key:
            print("   ‚Ä¢ DASHSCOPE_API_KEY no encontrada")
        print("\\nEl sistema puede funcionar con funcionalidad limitada.")
    
    return True


if __name__ == "__main__":
    # Verificar entorno antes de ejecutar
    if not check_environment():
        sys.exit(1)
    
    # Ejecutar sistema principal
    main()